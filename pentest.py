import requests
from zapv2 import ZAPv2
import time

# Configuration
#Pen test for Site: https://merchant-stg.goshopkey.com
target = 'https://gamechange.com/'
zap_url = 'http://localhost:8080'
api_key = 'rp20pmniodlto2g77pt1nph7q2'   # Replace with your actual API key

# Initialize ZAP API client
zap = ZAPv2(apikey=api_key, proxies={'http': zap_url, 'https': zap_url})

def spider_target(target):
    print('Spidering the target...')
    zap.spider.scan(target)
    time.sleep(2)
    while int(zap.spider.status()) < 100:
        print(f'Spider progress: {zap.spider.status()}%')
        time.sleep(2)
    print('Spider completed.')

def passive_scan():
    print('Passive scanning...')
    zap.pscan.enable_all_scanners()
    while int(zap.pscan.records_to_scan) > 0:
        print(f'Passive scan records left: {zap.pscan.records_to_scan}')
        time.sleep(2)
    print('Passive scan completed.')

def active_scan(target):
    print('Starting active scan...')
    zap.ascan.scan(target)
    while int(zap.ascan.status()) < 100:
        print(f'Active scan progress: {zap.ascan.status()}%')
        time.sleep(5)
    print('Active scan completed.')

def fuzzing(target):
    print('Starting fuzzing...')
    print('Starting fuzzing...')

    # Define the URL and parameters to be fuzzed
    url_to_fuzz = target + "search"  # Example: search endpoint
    parameter_to_fuzz = "query"  # Example: query parameter in search endpoint

    # Define the fuzzing payloads
    fuzz_payloads = [
        "admin'--",
        "' OR 1=1 --",
        "<script>alert('XSS')</script>",
        "1; DROP TABLE users",
        "../etc/passwd",
        "' OR 'a'='a",
        "%00",
        "%3Cscript%3Ealert('XSS')%3C%2Fscript%3E",
        "%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd",
        "1' OR '1'='1",
    ]

    # Send fuzzing requests
    for payload in fuzz_payloads:
        test_url = f"{url_to_fuzz}?{parameter_to_fuzz}={payload}"
        print(f'Fuzzing with payload: {payload}')
        response = requests.get(test_url)
        if response.status_code == 200:
            print(f'Payload {payload} sent successfully.')
        else:
            print(f'Payload {payload} failed with status code: {response.status_code}')

    print('Fuzzing completed.')

def check_sql_injection(target):
    print('Checking for SQL Injection...')
    sql_payloads = ["'", "1' OR '1'='1", "1' AND '1'='1"]
    for payload in sql_payloads:
        test_url = f"{target}{payload}"
        response = requests.get(test_url)
        if "error" in response.text.lower() or response.status_code == 500:
            print(f"Potential SQL injection with payload: {payload}")
        else:
            print(f"No SQL injection with payload: {payload}")

def check_xss(target):
    print('Checking for XSS...')
    xss_payloads = ["<script>alert('XSS')</script>", "';alert('XSS');//"]
    for payload in xss_payloads:
        test_url = f"{target}{payload}"
        response = requests.get(test_url)
        if payload in response.text:
            print(f"Potential XSS with payload: {payload}")
        else:
            print(f"No XSS with payload: {payload}")

def generate_report():
    print('Generating report...')
    report_html = zap.core.htmlreport()
    with open('zap_report.html', 'w') as f:
        f.write(report_html)
    print('Report generated: zap_report.html')

def run_security_tests(target):
    # Access the target URL
    zap.urlopen(target)
    time.sleep(2)

    # Spider the target
    spider_target(target)

    # Passive scan
    passive_scan()

    # Active scan
    active_scan(target)

    # Fuzzing
    fuzzing(target)

    # Check for SQL Injection
    check_sql_injection(target)

    # Check for XSS
    check_xss(target)

    # Generate the report
    generate_report()

# Start the security tests
run_security_tests(target)
